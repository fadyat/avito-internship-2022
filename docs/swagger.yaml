definitions:
  dto.OuterService:
    properties:
      name:
        description: |-
          @description: Name is a name of the service.
          @example:     aboba-service
        maxLength: 255
        minLength: 1
        type: string
      url:
        description: |-
          @description: URL is a link to the implementation of the service.
          @example:     http://aboba-service.com
        maxLength: 255
        type: string
    required:
    - name
    type: object
  dto.Replenishment:
    properties:
      amount:
        description: |-
          @description: Amount is the amount of money, that was transferred.
          @example:     100
        maximum: 1000000
        minimum: 1
        type: integer
      user_id:
        description: |-
          @description: UserID is a unique identifier of the user, that owns this transaction.
          @example:     1
        minimum: 1
        type: integer
    required:
    - amount
    - user_id
    type: object
  dto.Reservation:
    properties:
      amount:
        description: |-
          @description: Amount is the amount of money, that was transferred.
          @example:     100
        maximum: 1000000
        minimum: 1
        type: integer
      order_id:
        description: |-
          @description: OrderID is a unique identifier of the order, that belongs to the service.
          @example:     1
        minimum: 1
        type: integer
      service_id:
        description: |-
          @description: ServiceID is a unique identifier of the service, that made this transaction.
          @example:     1
        minimum: 1
        type: integer
      user_id:
        description: |-
          @description: UserID is a unique identifier of the user, that owns this transaction.
          @example:     1
        minimum: 1
        type: integer
    required:
    - amount
    - order_id
    - service_id
    - user_id
    type: object
  dto.UserWallet:
    properties:
      user_id:
        description: |-
          @description: UserID is a unique identifier of the user, that owns this wallet.
          @example:     1
        minimum: 1
        type: integer
    required:
    - user_id
    type: object
  dto.Withdrawal:
    properties:
      amount:
        description: |-
          @description: Amount is the amount of money, that was transferred.
          @example:     100
        maximum: 1000000
        minimum: 1
        type: integer
      user_id:
        description: |-
          @description: UserID is a unique identifier of the user, that owns this transaction.
          @example:     1
        minimum: 1
        type: integer
    required:
    - amount
    - user_id
    type: object
  models.OuterService:
    properties:
      id:
        description: |-
          @description: ID is given unique identifier of the service.
          @example:     1
        type: integer
      name:
        description: |-
          @description: Name is a name of the service.
          @example:     aboba-service
        type: string
      url:
        description: |-
          @description: URL is a link to the implementation of the service.
          @example:     http://aboba-service.com
        type: string
    type: object
  models.Transaction:
    properties:
      amount:
        description: |-
          @description: Amount is the amount of money, that was transferred.
          @example:     100
        type: integer
      created_at:
        description: |-
          @description: CreatedAt is the time, when the transaction was created.
          @example:     2021-01-01T00:00:00Z
        type: string
      id:
        description: |-
          @description: ID is a unique identifier of the transaction.
          @example:     1
        type: integer
      type:
        description: |-
          @description: Type is the type of the transaction.
          @example:     Replenishment
        type: string
      user_id:
        description: |-
          @description: UserID is a unique identifier of the user, that owns this transaction.
          @example:     1
        type: integer
    type: object
  models.UserWallet:
    properties:
      balance:
        description: |-
          @description: Balance is a current balance of the wallet.
          @example:     100
        type: integer
      user_id:
        description: |-
          @description: UserID is a unique identifier of the user, that owns this wallet.
          @example:     1
        type: integer
    type: object
  responses.ErrorResp:
    properties:
      description:
        description: |-
          @description: Description is a description of the error.
          @example:     invalid request with id=1
        type: string
      message:
        description: |-
          @description: Message is a message of the error.
          @example:     invalid request
        type: string
    type: object
  responses.HealthSuccess:
    properties:
      message:
        description: |-
          @description: Message is a success message.
          @example:     OK
        type: string
    type: object
  responses.Pagination:
    properties:
      found:
        description: |-
          @description: Found is a number of found items.
          @example:     10
        type: integer
      next_page:
        description: |-
          @description: NextPage is a number of the next page.
          @example:     3
        type: integer
      page:
        description: |-
          @description: Page is a number of the current page.
          @example:     2
        type: integer
      per_page:
        description: |-
          @description: PerPage is a number of items per page.
          @example:     10
        type: integer
      prev_page:
        description: |-
          @description: PrevPage is a number of the previous page.
          @example:     1
        type: integer
      total:
        description: |-
          @description: Total is a total number of items.
          @example:     100
        type: integer
    type: object
  responses.ServiceCreated:
    properties:
      id:
        description: |-
          @description: ID is given unique identifier of the service.
          @example:     1
        type: integer
    type: object
  responses.Services:
    properties:
      services:
        description: |-
          @description: Services is a list of services.
          @example:     [{"id":1,"name":"aboba-service","url":"http://aboba-service.com"}]
        items:
          $ref: '#/definitions/models.OuterService'
        type: array
    type: object
  responses.TransactionCreated:
    description: TransactionCreated is a response for transaction creation
    properties:
      id:
        description: |-
          @description ID is given unique identifier of the transaction
          @example     1
        type: integer
    type: object
  responses.TransactionPaginated:
    description: TransactionPaginated is a response for paginated transactions
    properties:
      pagination:
        $ref: '#/definitions/responses.Pagination'
        description: |-
          @description Pagination is a pagination object, which have info about pages
          @example     {"prev_page":1,"page":2,"next_page":3,"found":10,"limit":10,"total":100}
      transactions:
        description: |-
          @description Transactions is a list of transactions, which are paginated by page and perPage
          @example     [{"id":1,"user_id":1,"service_id":1,"amount":100,"type":"replenishment","created_at":"2021-10-01T00:00:00Z"}]
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
    type: object
  responses.UserWalletCreated:
    properties:
      id:
        description: |-
          @description: ID is given unique identifier of the wallet.
          @example:     1
        type: integer
    type: object
  responses.UserWallets:
    properties:
      wallets:
        description: |-
          @description: UserWallets is a list of user wallets.
          @example:     [{"user_id":1,"balance":100}]
        items:
          $ref: '#/definitions/models.UserWallet'
        type: array
    type: object
host: localhost:80
info:
  contact:
    name: Artyom Fadeyev
    url: https://github.com/fadyat
  description: This is a sample server for a balance API.
  title: Avito Internship 2022 Balance API
  version: 1.0.0
paths:
  /api/v1/health:
    get:
      description: Healthcheck endpoint, that checks if the service is alive and database
        connection is working.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.HealthSuccess'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResp'
      summary: Healthcheck
      tags:
      - health
  /api/v1/service:
    get:
      description: Get all outer services info in the system
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Services'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResp'
      summary: Get all services
      tags:
      - OuterService
    post:
      description: Create new outer service info in the system
      parameters:
      - description: Outer service short info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.OuterService'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.ServiceCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResp'
      summary: New service
      tags:
      - OuterService
  /api/v1/service/{id}:
    get:
      description: Get outer service info in the system by id
      parameters:
      - description: service_id
        format: uint64
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OuterService'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResp'
      summary: Get service by id
      tags:
      - OuterService
  /api/v1/transaction/replenishment:
    post:
      description: Replenishment of the user's balance by a certain amount and creating
        a replenishment transaction
      parameters:
      - description: Replenishment info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.Replenishment'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.TransactionCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResp'
      summary: Replenishment of the user's balance
      tags:
      - Transaction
  /api/v1/transaction/reservation:
    post:
      description: Reservation of the user's balance from another service by certain
        amount and creating a pending transaction
      parameters:
      - description: Reservation info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.Reservation'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.TransactionCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResp'
      summary: Reservation of the user's balance
      tags:
      - Transaction
  /api/v1/transaction/user/{id}:
    get:
      description: Get all user transactions in paginated form
      parameters:
      - description: User ID
        format: uint64
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: per_page
        type: integer
      - default: created_at, amount
        description: Order by
        enum:
        - created_at
        - amount
        in: query
        name: order_by
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TransactionPaginated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResp'
      summary: Get user transactions
      tags:
      - Transaction
  /api/v1/transaction/withdrawal:
    post:
      description: Withdrawal of the user's balance by a certain amount and creating
        a withdrawal transaction
      parameters:
      - description: Withdrawal info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.Withdrawal'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.TransactionCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResp'
      summary: Withdrawal of the user's balance
      tags:
      - Transaction
  /api/v1/wallet:
    get:
      description: Get wallets from the system
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserWallets'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResp'
      summary: Get wallets
      tags:
      - UserWallet
    post:
      description: Create new wallet in the system
      parameters:
      - description: Wallet info
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UserWallet'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.UserWalletCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "407":
          description: Proxy Authentication Required
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResp'
      summary: New wallet
      tags:
      - UserWallet
  /api/v1/wallet/{id}:
    get:
      description: Get user wallet from the system by id
      parameters:
      - description: Wallet id
        format: uint64
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserWallet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/responses.ErrorResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResp'
      summary: Get wallet
      tags:
      - UserWallet
schemes:
- http
swagger: "2.0"
